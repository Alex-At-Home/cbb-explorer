{
   "aggregation_table": {
      "pipelines": [],
      "map_reduce": {
         "reduce": "//Called once on \"states\",\n//a list of the return\n//values from each shard's\n//combine:\n//return states.stream()\n// .collect(finalCollector);",
         "init": "//Init \"state\" variable, eg:\n//(list or map)\n//state.collect = [];\n//state.collect = [:];",
         "lib": "//Add internal logic here\n//to keep the map/etc scripts\n//easier to follow.\n//Everything in here is \n//available to all other\n//scripts. Eg:\n//def myFunction(def param) {\n// return value \n//}",
         "params": {},
         "map": "//Update state with info\n//from \"doc\" or \"params._source\"\n//(called once per doc)\n//eg state.collect.add(\n// doc['field'].value\n// );\n// or (fold)\n// state.collect.stat += \n// doc['field'].value;",
         "combine": "//Called once per shard\n//once all docs processed\n//eg:\n//return state.collect\n// .stream()\n// .filter(t => true)\n// .collect(shardCollector);"
      },
      "query": {
         "_source": "$$field_filters",
         "query": {
            "bool": {
               "filter": [],
               "must_not": [],
               "should": [],
               "must": [
                  {
                     "script": {
                        "script": "$$script_field(game_filter)"
                     }
                  },
                  {
                     "query_string": {
                        "query": "$$query"
                     }
                  }
               ]
            }
         }
      },
      "buckets": [
         {
            "name": "tri_filter",
            "agg_type": "filters",
            "config": {
               "filters": {
                  "on": {
                     "query_string": {
                        "query": "players.id:Ayala"
                     }
                  },
                  "off": {
                     "query_string": {
                        "query": "NOT players.id:Ayala"
                     }
                  }
               }
            },
            "location": "automatic"
         },
         {
            "agg_type": "terms",
            "name": "dummy_terms",
            "config": {
               "size": 10000,
               "script": "return '0'"
            },
            "field_filter": "-doc_count_error_upper_bound,-sum_other_doc_count"
         }
      ],
      "script_fields": [
         {
            "name": "off_ppp",
            "script": "if (doc[\"team_stats.num_possessions\"].value > 0) {\n return 100.0*doc[\"team_stats.pts\"].value/doc[\"team_stats.num_possessions\"].value;\n} else {\n return 0.0;\n}\n"
         },
         {
            "name": "def_ppp",
            "script": "if (doc[\"opponent_stats.num_possessions\"].value > 0) {\n return 100.0*doc[\"opponent_stats.pts\"].value/doc[\"opponent_stats.num_possessions\"].value;\n} else {\n return 0.0;\n}\n"
         },
         {
            "name": "kp_adj_off",
            "params": {
               "pbp_to_kp": "$$lookupMap(PBP2KP_Teams)",
               "kp": "$$lookupMap(KP_lookup_2019)"
            },
            "script": "def kp_name = params.pbp_to_kp[doc[\"opponent.team.keyword\"].value];\nif (kp_name != null) {\ndef oppo = params.kp[kp_name.pbp_kp_team];\nif (oppo != null) {\n return oppo['stats.adj_off.value'];\n} else {\n return null;\n}\n} else {\n return null;\n}"
         },
         {
            "name": "kp_adj_def",
            "params": {
               "pbp_to_kp": "$$lookupMap(PBP2KP_Teams)",
               "kp": "$$lookupMap(KP_lookup_2019)"
            },
            "script": "def kp_name = params.pbp_to_kp[doc[\"opponent.team.keyword\"].value];\nif (kp_name != null) {\ndef oppo = params.kp[kp_name.pbp_kp_team];\nif (oppo != null) {\n return oppo['stats.adj_def.value'];\n} else {\n return null;\n}\n} else {\n return null;\n}"
         },
         {
            "name": "game_filter",
            "params": {
               "pbp_to_kp": "$$lookupMap(PBP2KP_Teams)",
               "kp": "$$lookupMap(KP_lookup_2019)",
               "game_filter": {
                  "game_filter": {
                     "min_kp": 0,
                     "max_kp": 400
                  }
               }
            },
            "script": "def kp_name = params.pbp_to_kp[doc[\"opponent.team.keyword\"].value];\nif (kp_name != null) {\ndef oppo = params.kp[kp_name.pbp_kp_team];\nif (oppo != null) {\n def kp_rank = oppo['stats.adj_margin.rank'];\n def game_filter = params.game_filter.game_filter;\n //TODO: high major\n return (kp_rank >= game_filter.min_kp) && (kp_rank <= game_filter.max_kp);\n} else {\n return false;\n}\n} else {\n return false;\n}\n"
         },
         {
            "name": "off_efg",
            "script": "def attempts = doc['team_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (doc['team_stats.fg_2p.made.total'].value + 1.5*doc['team_stats.fg_3p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_efg",
            "script": "def attempts = doc['opponent_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (doc['opponent_stats.fg_2p.made.total'].value + 1.5*doc['opponent_stats.fg_3p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "off_to",
            "script": "if (doc[\"team_stats.num_possessions\"].value > 0) {\n return 1.0*doc[\"team_stats.to.total\"].value/doc[\"team_stats.num_possessions\"].value;\n} else {\n return 0.0;\n}"
         },
         {
            "name": "def_to",
            "script": "if (doc[\"opponent_stats.num_possessions\"].value > 0) {\n return 1.0*doc[\"opponent_stats.to.total\"].value/doc[\"opponent_stats.num_possessions\"].value;\n} else {\n return 0.0;\n}"
         },
         {
            "name": "off_orb",
            "script": "def orb = doc['team_stats.orb.total'].value;\ndef drb = doc['opponent_stats.drb.total'].value;\n\nif (orb + drb > 0) {\n return 1.0*orb/(orb + drb);\n} else {\n return 0;\n}"
         },
         {
            "name": "def_orb",
            "script": "def drb = doc['team_stats.drb.total'].value;\ndef orb = doc['opponent_stats.orb.total'].value;\n\nif (orb + drb > 0) {\n return 1.0*orb/(orb + drb);\n} else {\n return 0;\n}"
         },
         {
            "name": "off_orb_total",
            "script": "def orb = doc['team_stats.orb.total'].value;\ndef drb = doc['opponent_stats.drb.total'].value;\nreturn orb + drb;"
         },
         {
            "name": "def_orb_total",
            "script": "def drb = doc['team_stats.drb.total'].value;\ndef orb = doc['opponent_stats.orb.total'].value;\nreturn orb + drb;"
         },
         {
            "name": "off_2p",
            "script": "def attempts = doc['team_stats.fg_2p.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['team_stats.fg_2p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_2p",
            "script": "def attempts = doc['opponent_stats.fg_2p.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['opponent_stats.fg_2p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "off_3pr",
            "script": "def attempts = doc['team_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['team_stats.fg_3p.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_3pr",
            "script": "def attempts = doc['opponent_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['opponent_stats.fg_3p.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "off_2pmidr",
            "script": "def attempts = doc['team_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['team_stats.fg_mid.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_2pmidr",
            "script": "def attempts = doc['opponent_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['opponent_stats.fg_mid.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "off_2primr",
            "script": "def attempts = doc['team_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['team_stats.fg_rim.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_2primr",
            "script": "def attempts = doc['opponent_stats.fg.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['opponent_stats.fg_rim.attempts.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "off_3p",
            "script": "def attempts = doc['team_stats.fg_3p.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['team_stats.fg_3p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         },
         {
            "name": "def_3p",
            "script": "def attempts = doc['opponent_stats.fg_3p.attempts.total'].value;\n\nif (attempts > 0) {\n return (1.0*doc['opponent_stats.fg_3p.made.total'].value)/attempts;\n} else {\n return 0;\n}"
         }
      ],
      "metrics": [
         {
            "agg_type": "sum",
            "name": "points_scored",
            "config": {
               "field": "team_stats.pts"
            }
         },
         {
            "agg_type": "sum",
            "name": "points_allowed",
            "config": {
               "field": "opponent_stats.pts"
            }
         },
         {
            "agg_type": "sum",
            "name": "off_poss",
            "config": {
               "field": "team_stats.num_possessions"
            }
         },
         {
            "agg_type": "sum",
            "name": "def_poss",
            "config": {
               "field": "opponent_stats.num_possessions"
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_ppp",
            "config": {
               "weight": {
                  "field": "team_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(off_ppp)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_ppp",
            "config": {
               "weight": {
                  "field": "opponent_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(def_ppp)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "adj_opp_off",
            "location": "automatic",
            "config": {
               "weight": {
                  "field": "opponent_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(kp_adj_off)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "adj_opp_def",
            "config": {
               "weight": {
                  "field": "team_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(kp_adj_def)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_efg",
            "config": {
               "weight": {
                  "field": "team_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_efg)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_efg",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_efg)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_to",
            "config": {
               "weight": {
                  "field": "team_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(off_to)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_to",
            "config": {
               "weight": {
                  "field": "opponent_stats.num_possessions"
               },
               "value": {
                  "script": "$$script_field(def_to)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_orb",
            "config": {
               "weight": {
                  "script": "$$script_field(off_orb_total)"
               },
               "value": {
                  "script": "$$script_field(off_orb)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_orb",
            "config": {
               "weight": {
                  "script": "$$script_field(def_orb_total)"
               },
               "value": {
                  "script": "$$script_field(def_orb)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_2p",
            "config": {
               "weight": {
                  "field": "team_stats.fg_2p.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_2p)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_2p",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg_2p.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_2p)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_3pr",
            "config": {
               "weight": {
                  "field": "team_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_3pr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_3pr",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_3pr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_2pmidr",
            "config": {
               "weight": {
                  "field": "team_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_2pmidr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_2pmidr",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_2pmidr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_2primr",
            "config": {
               "weight": {
                  "field": "team_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_2primr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_2primr",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_2primr)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "off_3p",
            "config": {
               "weight": {
                  "field": "team_stats.fg_3p.attempts.total"
               },
               "value": {
                  "script": "$$script_field(off_3p)"
               }
            }
         },
         {
            "agg_type": "weighted_avg",
            "name": "def_3p",
            "config": {
               "weight": {
                  "field": "opponent_stats.fg_3p.attempts.total"
               },
               "value": {
                  "script": "$$script_field(def_3p)"
               }
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_fta",
            "config": {
               "field": "team_stats.ft.attempts.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_fga",
            "config": {
               "field": "team_stats.fg.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "off_ftr",
            "config": {
               "buckets_path": {
                  "my_var2": "total_off_fga",
                  "my_var1": "total_off_fta"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_fta",
            "config": {
               "field": "opponent_stats.ft.attempts.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_fga",
            "config": {
               "field": "opponent_stats.fg.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "def_ftr",
            "config": {
               "buckets_path": {
                  "my_var2": "total_def_fga",
                  "my_var1": "total_def_fta"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_2pmid_made",
            "config": {
               "field": "team_stats.fg_mid.made.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_2pmid_attempts",
            "config": {
               "field": "team_stats.fg_mid.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "off_2pmid",
            "config": {
               "buckets_path": {
                  "my_var2": "total_off_2pmid_attempts",
                  "my_var1": "total_off_2pmid_made"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_2pmid_made",
            "config": {
               "field": "opponent_stats.fg_mid.made.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_2pmid_attempts",
            "config": {
               "field": "opponent_stats.fg_mid.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "def_2pmid",
            "config": {
               "buckets_path": {
                  "my_var2": "total_def_2pmid_attempts",
                  "my_var1": "total_def_2pmid_made"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_2prim_made",
            "config": {
               "field": "team_stats.fg_rim.made.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_off_2prim_attempts",
            "config": {
               "field": "team_stats.fg_rim.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "off_2prim",
            "config": {
               "buckets_path": {
                  "my_var2": "total_off_2prim_attempts",
                  "my_var1": "total_off_2prim_made"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_2prim_made",
            "config": {
               "field": "opponent_stats.fg_rim.made.total"
            }
         },
         {
            "agg_type": "sum",
            "name": "total_def_2prim_attempts",
            "config": {
               "field": "opponent_stats.fg_rim.attempts.total"
            }
         },
         {
            "agg_type": "bucket_script",
            "name": "def_2prim",
            "config": {
               "buckets_path": {
                  "my_var2": "total_def_2prim_attempts",
                  "my_var1": "total_def_2prim_made"
               },
               "script": "params.my_var1 / params.my_var2"
            }
         }
      ],
      "index_pattern": "maryland_2018",
      "enabled": true
   },
   "common": {
      "headers": {
         "position": "top",
         "field_filters": [
            "# eg -x.*.y / +x.y (start with -s where possible)",
            "# pre-built groups: $$<name>",
            "#(note fields are laid out in match order)",
            ""
         ],
         "exclude_filtered_fields_from_autocomplete": true,
         "field_aliases": [
            "#field.path=Alias To Use",
            "#(note fields are laid out in order within filter matches)",
            "",
            ""
         ],
         "autocomplete_filters": [
            "# eg x, -x.*.y, +x.y (start with -s if possible)",
            "# pre-built groups: $$<name>"
         ]
      },
      "pagination": {
         "local": {
            "position": "bottom"
         },
         "source": "none"
      },
      "query": {
         "global": {
            "range_name": "F2"
         },
         "source": "local",
         "local": {
            "position": "top"
         }
      },
      "global_control_triggers": [
         "F5"
      ],
      "skip": {
         "rows": "",
         "cols": ""
      },
      "global_content_triggers": [
         "G2:I3",
         "B1:B5"
      ],
      "formatting": {
         "theme": "none",
         "include_note": true
      },
      "status": {
         "global": {
            "range_name": "A17"
         },
         "position": "top",
         "merge": false
      }
   },
   "data_table": {
      "script_fields": [],
      "index_pattern": "kenpom_all",
      "enabled": false,
      "query": {
         "from": "$$pagination_from",
         "_source": "$$field_filters",
         "sort": [
            {
               "team_season.year": {
                  "order": "desc"
               }
            }
         ],
         "size": "$$pagination_size",
         "query": {
            "bool": {
               "filter": [],
               "must_not": [],
               "should": [],
               "must": [
                  {
                     "query_string": {
                        "query": "coach:Turgeon"
                     }
                  }
               ]
            }
         }
      }
   },
   "trigger": "control_change",
   "sql_table": {
      "enabled": false,
      "query": "--SHOW TABLES\n--DESCRIBE \"$$index\"\n--SELECT * FROM \"$$index\" WHERE $$query $$pagination"
   },
   "cat_table": {
      "options": [],
      "endpoint": "",
      "enabled": false
   },
   "name": "Efficient on/off test"
}
