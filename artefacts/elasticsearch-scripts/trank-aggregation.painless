//////////////////////////////////////////////////////////////
//
// Params

{
  "build_lists": true, //(needs to be false if running inside elasticsearch-sheets)
  "fixed_prefix": false, //(true only for tidier)
   "_name_": "composite"
}

//////////////////////////////////////////////////////////////
//
// Init

state.collect = [:];
state.build_lists = params.build_lists;

//////////////////////////////////////////////////////////////
//
// Map

def obj = state.collect;
def prefix = params.fixed_prefix ? "" : doc["yr"].value.toLowerCase() + "_";

//(a bit of data quality)
def supported_prefixes = new HashSet(["", "fr_", "so_", "jr_", "sr_"]);

// Complicated:

if (null == obj.num_years) {
   obj.num_years = new HashSet();
}
if (!obj.num_years.contains(prefix) && supported_prefixes.contains(prefix)) {
   //(dup check)
   obj.num_years.add(prefix);

  if (state.build_lists) {

    if (null == obj.missing_fields) {
       obj.missing_fields = new HashSet();
    }

    if (null == obj.classes) {
       obj.classes = new HashSet();
    }
    obj.classes.add(doc["yr"].value);

  }//END if (state.build_lists)

  // Simple:

  def fields = [
  "player_name","team","conf","GP","Min_per","ORtg","usg","eFG","TS_per","ORB_per","DRB_per","AST_per","TO_per","FTM","FTA","FT_per","twoPM","twoPA","twoP_per","TPM","TPA","TP_per","blk_per","stl_per","ftr","yr","ht","num","porpag","adjoe","pfr","year","pid","type","Rec Rank",
  "ast/tov","rimmade","rimmade_p_rimmiss","midmade","midmade_p_midmiss","rimmade_by_rimmade_p_rimmiss","midmade_by_midmade_p_midmiss","dunksmade","dunksmiss_p_dunksmade","dunksmade_by_dunksmade_p_dunksmiss","pick","drtg","adrtg","dporpag","stops","bpm","obpm","dbpm","gbpm","mp","ogbpm","dgbpm","oreb","dreb","treb","ast","stl","blk","pts"
  ];

  for (def i: fields) {
     def field = i == "ast/tov" ?
      "ast_tov" : (i == "Rec Rank" ?
        "rec_rank" : i
      )
      ; //(fix mistakes in mapping)
     if (doc[i].size() > 0) {
        obj[prefix + field] = doc[i].value;
     } else {
        if (state.build_lists) {
           obj.missing_fields.add(prefix + field);
           obj.missing_fields.add(field);
        }
     }
  }//END for

  // Handle height separately:
  def height_str = doc["ht"];
  if (height_str.size() > 0) {
    def height_str_val = height_str.value;
    if (height_str_val.length() >= 3) {
      def feet_str = height_str_val.substring(0, 1);
      def in_str = height_str_val.substring(2);

      obj[prefix + "ht_in"] = Integer.parseInt(feet_str)*12 + Integer.parseInt(in_str);
    }
  }

  // DunkR, RimR, MidR and 3PR as fields:
  def twoga = doc["twoPA"];
  def threega = doc["TPA"];
  if (twoga.size() > 0 && threega.size() > 0 && (twoga.value + threega.value) > 0) {
    def total_attempts = twoga.value + threega.value;
    def eFG = doc["eFG"].value/100.0;
    if (eFG == 0) eFG = 1;

    // (Also build a quality independent set of relative shooting ability metrics)

    def dunk_attempts = doc["dunksmiss_p_dunksmade"];
    if (dunk_attempts.size() > 0) {
      obj[prefix + "dunk_rate"] = 100.0 * dunk_attempts.value / total_attempts;
    } else {
      obj[prefix + "dunk_rate"] = 0.0;
    }
    def rim_attempts = doc["rimmade_p_rimmiss"];
    def rim_pct = doc["rimmade_by_rimmade_p_rimmiss"];
    if (rim_attempts.size() > 0) {
      obj[prefix + "rim_rate"] = 100.0 * rim_attempts.value / total_attempts;
      obj[prefix + "rim_relative"] = rim_pct.size() > 0 ? 100.0*rim_pct.value/eFG : 0.0;

    } else {
      obj[prefix + "rim_rate"] = 0.0;
      obj[prefix + "rim_relative"] = 0.0;
    }
    def mid_attempts = doc["midmade_p_midmiss"];
    def mid_pct = doc["midmade_by_midmade_p_midmiss"];
    if (mid_attempts.size() > 0) {
      obj[prefix + "mid_rate"] = 100.0 * mid_attempts.value / total_attempts;
      obj[prefix + "mid_relative"] = mid_pct.size() > 0 ? 100.0*mid_pct.value/eFG : 0.0;
    } else {
      obj[prefix + "mid_rate"] = 0.0;
      obj[prefix + "mid_relative"] = 0.0;
    }
    obj[prefix + "three_rate"] = 100.0* threega.value / total_attempts;
    obj[prefix + "three_relative"] = 150.0*doc["TP_per"].value/eFG; //(1.5x because eFG scale)
  } else {
    obj[prefix + "rim_rate"] = 0.0;
    obj[prefix + "mid_rate"] = 0.0;
    obj[prefix + "three_rate"] = 0.0;
    obj[prefix + "rim_relative"] = 0.0;
    obj[prefix + "mid_relative"] = 0.0;
    obj[prefix + "three_relative"] = 0.0;
  }

  // Assists per FG (might be useful as a pos classifier)
  def assists = doc["ast"];
  def games = doc["GP"];
  if (assists.size() > 0 && games.size() > 0 && twoga.size() > 0 && threega.size() > 0 &&
    (twoga.value + threega.value) > 0)
  {
    def total_attempts = twoga.value + threega.value;
    def total_assists = assists.value*games.value;
    obj[prefix + "assist_per_fga"] = 100.0*total_assists/total_attempts;
  } else {
    obj[prefix + "assist_per_fga"] = 0.0;
  }

}//END if (!obj.num_years.contains(prefix))

//(IMPORTANT NOTE: can't ship multi-shard HashSet from map/combine -> reduce)

//////////////////////////////////////////////////////////////
//
// Combine

def fields = [ "missing_fields", "num_years", "classes" ];
for (def kk: fields) {
    if (null != state.collect[kk]) {
      state.collect[kk] = new ArrayList(state.collect[kk]);
    }
}
return state.collect;

//////////////////////////////////////////////////////////////
//
// Reduce

def finalObj = [:];

for (def o: states) {
   for (def kk: o.keySet()) {
      if ((kk == "missing_fields") || (kk == "num_years") || (kk == "classes")) {
         if (null == finalObj[kk]) {
            finalObj[kk] = new HashSet();
         }
         finalObj[kk].addAll(o[kk]);
      }
      else {
         finalObj[kk] = o[kk];
      }
   }
}

finalObj.num_years = finalObj.num_years.size();
if ((null != finalObj.missing_fields) && (finalObj.missing_fields.size() > 0)) {
  finalObj.is_valid = false;
}

finalObj.transferred = (null == finalObj.fr_yr);

return finalObj;
